{
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "FulFillmentFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "FulFillmentSucceeded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "fulfillRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "numWords",
              "type": "uint32"
            },
            {
              "internalType": "enum Randomness.RandomnessSource",
              "name": "randomnessSource",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "fulfillmentBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "fulfillmentEpochIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "expirationBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "expirationEpochIndex",
              "type": "uint64"
            },
            {
              "internalType": "enum Randomness.RequestStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Randomness.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "enum Randomness.RequestStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseRequestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "purgeExpiredRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayEpochIndex",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "refundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "gasLimit",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "numWords",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "delay",
          "type": "uint64"
        }
      ],
      "name": "requestLocalVRFRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "refundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "gasLimit",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "numWords",
          "type": "uint8"
        }
      ],
      "name": "requestRelayBabeEpochRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "fulfillRequest(uint256)": "9a91eb0d",
    "getRequest(uint256)": "c58343ef",
    "getRequestStatus(uint256)": "d8a4676f",
    "increaseRequestFee(uint256,uint256)": "d0408a7f",
    "purgeExpiredRequest(uint256)": "1d26cbab",
    "relayEpochIndex()": "81797566",
    "requestLocalVRFRandomWords(address,uint256,uint64,bytes32,uint8,uint64)": "9478430c",
    "requestRelayBabeEpochRandomWords(address,uint256,uint64,bytes32,uint8)": "33c14a63",
    "requiredDeposit()": "fb7cfdd7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"FulFillmentFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FulFillmentSucceeded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"fulfillRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"enum Randomness.RandomnessSource\",\"name\":\"randomnessSource\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"fulfillmentEpochIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"expirationBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expirationEpochIndex\",\"type\":\"uint64\"},{\"internalType\":\"enum Randomness.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Randomness.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"enum Randomness.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseRequestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"purgeExpiredRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayEpochIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"numWords\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"delay\",\"type\":\"uint64\"}],\"name\":\"requestLocalVRFRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"numWords\",\"type\":\"uint8\"}],\"name\":\"requestRelayBabeEpochRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Moonbeam Team\",\"custom:address\":\"0x0000000000000000000000000000000000000809\",\"details\":\"The interface through which solidity contracts will interact with Randomness\",\"kind\":\"dev\",\"methods\":{\"fulfillRequest(uint256)\":{\"custom:selector\":\"9a91eb0d\",\"details\":\"fulFill the request which will call the contract method \\\"fulfillRandomWords\\\"Fees of the caller are refunded if the request is fulfillable\",\"params\":{\"requestId\":\"Request to be fulfilled (must be < 2**64)\"}},\"getRequest(uint256)\":{\"custom:selector\":\"c58343ef\",\"params\":{\"requestId\":\"The id of the request to check (must be < 2**64)\"},\"returns\":{\"request\":\"The request\"}},\"getRequestStatus(uint256)\":{\"custom:selector\":\"d8a4676f\",\"params\":{\"requestId\":\"The id of the request to check (must be < 2**64)\"},\"returns\":{\"status\":\"Status of the request\"}},\"increaseRequestFee(uint256,uint256)\":{\"custom:selector\":\"d0408a7f\",\"params\":{\"feeIncrease\":\"Amount to increase\",\"requestId\":\"Request receiving the additional fees (must be < 2**64)\"}},\"purgeExpiredRequest(uint256)\":{\"custom:selector\":\"1d26cbab\",\"params\":{\"requestId\":\"Request to be purged (must be < 2**64)\"}},\"relayEpochIndex()\":{\"custom:selector\":\"81797566\",\"details\":\"An epoch represents real time and not a block numberCurrently, time between epoch changes cannot be longer than:- Kusama/Westend/Rococo: 600 relay blocks (1 hour)- Polkadot: 2400 relay blocks (4 hours)\"},\"requestLocalVRFRandomWords(address,uint256,uint64,bytes32,uint8,uint64)\":{\"custom:selector\":\"9478430c\",\"details\":\"This is using pseudo-random VRF executed by the collator at the fulfillmentWarning:The collator in charge of producing the block at fulfillment can decide to skipproducing the block in order to have a different random word generated by the nextcollator, at the cost of a block reward. It is therefore economically viable to usethis randomness source only if the financial reward at stake is lower than the blockreward.In order to reduce the risk of a collator being able to predict the random wordswhen the request is performed, it is possible to increase the delay to multiple blocksThe higher the delay is, the less likely the collator will be able to know whichcollator will be in charge of fulfilling the request.Fulfillment is manual and can be executed by anyone (for free) after the given delay\",\"params\":{\"delay\":\"The number of blocks until the request can be fulfilled (between MIN_DELAY_BLOCKS and MAX_DELAY_BLOCKS)\",\"fee\":\"The amount to set aside to pay for the fulfillment\",\"gasLimit\":\"The gas limit to use for the fulfillment\",\"numWords\":\"The number of random words requested (from 1 to MAX_RANDOM_WORDS)\",\"refundAddress\":\"The address receiving the left-over fees after the fulfillment\",\"salt\":\"A string being mixed with the randomness seed to obtain different random words\"},\"returns\":{\"_0\":\"requestId The id of the request requestLocalVRFRandomWords\"}},\"requestRelayBabeEpochRandomWords(address,uint256,uint64,bytes32,uint8)\":{\"custom:selector\":\"33c14a63\",\"details\":\"The random words are generated from the hash of the all the VRF provided by therelaychain validator during 1 epoch.It requires a delay of at least 1 epoch after the current epoch to be unpredictableat the time the request is performed.Warning:The validator (on the relaychain) of the last block of an epoch can decide to skipproducing the block in order to choose the previous generated epoch random numberat the cost of a relaychain block rewards. It is therefore economically viable to usethis randomness source only if the financial reward at stake is lower than the relaychainblock reward.(see https://crates.parity.io/pallet_babe/struct.RandomnessFromOneEpochAgo.html)Fulfillment is manual and can be executed by anyone (for free) atthe beginning of the 2nd relay epoch following the current one\",\"params\":{\"fee\":\"Amount to set aside to pay for the fulfillment. Those fees are taken from the contract\",\"gasLimit\":\"Gas limit for the fulfillment\",\"numWords\":\"Number of random words to be returned (limited to MAX_RANDOM_WORDS)\",\"refundAddress\":\"The address receiving the left-over fees after the fulfillment\",\"salt\":\"Salt to be mixed with raw randomness to get output\"},\"returns\":{\"_0\":\"requestId The id of the request\"}},\"requiredDeposit()\":{\"custom:selector\":\"fb7cfdd7\",\"details\":\"Each request will need a deposit.\"}},\"title\":\"Pallet Randomness Interface\",\"version\":1},\"userdoc\":{\"events\":{\"FulFillmentFailed()\":{\"notice\":\"Event emitted when the request has failed to execute fulfillment\"},\"FulFillmentSucceeded()\":{\"notice\":\"Event emitted when the request has been successfully executed\"}},\"kind\":\"user\",\"methods\":{\"getRequest(uint256)\":{\"notice\":\"Returns the request or revert\"},\"getRequestStatus(uint256)\":{\"notice\":\"Returns the request status\"},\"relayEpochIndex()\":{\"notice\":\"Return the current relay epoch index\"},\"requestLocalVRFRandomWords(address,uint256,uint64,bytes32,uint8,uint64)\":{\"notice\":\"Request random words generated from the parachain VRF\"},\"requestRelayBabeEpochRandomWords(address,uint256,uint64,bytes32,uint8)\":{\"notice\":\"Request random words generated from the relaychain Babe consensus\"},\"requiredDeposit()\":{\"notice\":\"Return the deposit required to perform a request\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Randomness.sol\":\"Randomness\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/Randomness.sol\":{\"keccak256\":\"0x27efea49ef16fb8c0bf9cd827b35f2ab00d4cd99b14437d276e96249fd090830\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://4fb4e1133ce29a3017162075ed9f299be2c1f1385877a4ca5f3eb13e6754ae31\",\"dweb:/ipfs/QmPmxu59YeBZs6rt2iSSMT9CsabTqz6TNHQTyZ1JTvxQzB\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.20+commit.a1b79de6"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "event",
          "name": "FulFillmentFailed",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "FulFillmentSucceeded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "fulfillRequest"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRequest",
          "outputs": [
            {
              "internalType": "struct Randomness.Request",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "refundAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "fee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint32",
                  "name": "numWords",
                  "type": "uint32"
                },
                {
                  "internalType": "enum Randomness.RandomnessSource",
                  "name": "randomnessSource",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "fulfillmentBlock",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "fulfillmentEpochIndex",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "expirationBlock",
                  "type": "uint32"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationEpochIndex",
                  "type": "uint64"
                },
                {
                  "internalType": "enum Randomness.RequestStatus",
                  "name": "status",
                  "type": "uint8"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRequestStatus",
          "outputs": [
            {
              "internalType": "enum Randomness.RequestStatus",
              "name": "status",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeIncrease",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseRequestFee"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "purgeExpiredRequest"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "relayEpochIndex",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "numWords",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "delay",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "requestLocalVRFRandomWords",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "numWords",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "requestRelayBabeEpochRandomWords",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "requiredDeposit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "fulfillRequest(uint256)": {
            "custom:selector": "9a91eb0d",
            "details": "fulFill the request which will call the contract method \"fulfillRandomWords\"Fees of the caller are refunded if the request is fulfillable",
            "params": {
              "requestId": "Request to be fulfilled (must be < 2**64)"
            }
          },
          "getRequest(uint256)": {
            "custom:selector": "c58343ef",
            "params": {
              "requestId": "The id of the request to check (must be < 2**64)"
            },
            "returns": {
              "request": "The request"
            }
          },
          "getRequestStatus(uint256)": {
            "custom:selector": "d8a4676f",
            "params": {
              "requestId": "The id of the request to check (must be < 2**64)"
            },
            "returns": {
              "status": "Status of the request"
            }
          },
          "increaseRequestFee(uint256,uint256)": {
            "custom:selector": "d0408a7f",
            "params": {
              "feeIncrease": "Amount to increase",
              "requestId": "Request receiving the additional fees (must be < 2**64)"
            }
          },
          "purgeExpiredRequest(uint256)": {
            "custom:selector": "1d26cbab",
            "params": {
              "requestId": "Request to be purged (must be < 2**64)"
            }
          },
          "relayEpochIndex()": {
            "custom:selector": "81797566",
            "details": "An epoch represents real time and not a block numberCurrently, time between epoch changes cannot be longer than:- Kusama/Westend/Rococo: 600 relay blocks (1 hour)- Polkadot: 2400 relay blocks (4 hours)"
          },
          "requestLocalVRFRandomWords(address,uint256,uint64,bytes32,uint8,uint64)": {
            "custom:selector": "9478430c",
            "details": "This is using pseudo-random VRF executed by the collator at the fulfillmentWarning:The collator in charge of producing the block at fulfillment can decide to skipproducing the block in order to have a different random word generated by the nextcollator, at the cost of a block reward. It is therefore economically viable to usethis randomness source only if the financial reward at stake is lower than the blockreward.In order to reduce the risk of a collator being able to predict the random wordswhen the request is performed, it is possible to increase the delay to multiple blocksThe higher the delay is, the less likely the collator will be able to know whichcollator will be in charge of fulfilling the request.Fulfillment is manual and can be executed by anyone (for free) after the given delay",
            "params": {
              "delay": "The number of blocks until the request can be fulfilled (between MIN_DELAY_BLOCKS and MAX_DELAY_BLOCKS)",
              "fee": "The amount to set aside to pay for the fulfillment",
              "gasLimit": "The gas limit to use for the fulfillment",
              "numWords": "The number of random words requested (from 1 to MAX_RANDOM_WORDS)",
              "refundAddress": "The address receiving the left-over fees after the fulfillment",
              "salt": "A string being mixed with the randomness seed to obtain different random words"
            },
            "returns": {
              "_0": "requestId The id of the request requestLocalVRFRandomWords"
            }
          },
          "requestRelayBabeEpochRandomWords(address,uint256,uint64,bytes32,uint8)": {
            "custom:selector": "33c14a63",
            "details": "The random words are generated from the hash of the all the VRF provided by therelaychain validator during 1 epoch.It requires a delay of at least 1 epoch after the current epoch to be unpredictableat the time the request is performed.Warning:The validator (on the relaychain) of the last block of an epoch can decide to skipproducing the block in order to choose the previous generated epoch random numberat the cost of a relaychain block rewards. It is therefore economically viable to usethis randomness source only if the financial reward at stake is lower than the relaychainblock reward.(see https://crates.parity.io/pallet_babe/struct.RandomnessFromOneEpochAgo.html)Fulfillment is manual and can be executed by anyone (for free) atthe beginning of the 2nd relay epoch following the current one",
            "params": {
              "fee": "Amount to set aside to pay for the fulfillment. Those fees are taken from the contract",
              "gasLimit": "Gas limit for the fulfillment",
              "numWords": "Number of random words to be returned (limited to MAX_RANDOM_WORDS)",
              "refundAddress": "The address receiving the left-over fees after the fulfillment",
              "salt": "Salt to be mixed with raw randomness to get output"
            },
            "returns": {
              "_0": "requestId The id of the request"
            }
          },
          "requiredDeposit()": {
            "custom:selector": "fb7cfdd7",
            "details": "Each request will need a deposit."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getRequest(uint256)": {
            "notice": "Returns the request or revert"
          },
          "getRequestStatus(uint256)": {
            "notice": "Returns the request status"
          },
          "relayEpochIndex()": {
            "notice": "Return the current relay epoch index"
          },
          "requestLocalVRFRandomWords(address,uint256,uint64,bytes32,uint8,uint64)": {
            "notice": "Request random words generated from the parachain VRF"
          },
          "requestRelayBabeEpochRandomWords(address,uint256,uint64,bytes32,uint8)": {
            "notice": "Request random words generated from the relaychain Babe consensus"
          },
          "requiredDeposit()": {
            "notice": "Return the deposit required to perform a request"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/Randomness.sol": "Randomness"
      },
      "libraries": {}
    },
    "sources": {
      "src/Randomness.sol": {
        "keccak256": "0x27efea49ef16fb8c0bf9cd827b35f2ab00d4cd99b14437d276e96249fd090830",
        "urls": [
          "bzz-raw://4fb4e1133ce29a3017162075ed9f299be2c1f1385877a4ca5f3eb13e6754ae31",
          "dweb:/ipfs/QmPmxu59YeBZs6rt2iSSMT9CsabTqz6TNHQTyZ1JTvxQzB"
        ],
        "license": "GPL-3.0-only"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/Randomness.sol",
    "id": 2262,
    "exportedSymbols": {
      "MAX_RANDOM_WORDS": [
        2117
      ],
      "MAX_VRF_BLOCKS_DELAY": [
        2125
      ],
      "MIN_VRF_BLOCKS_DELAY": [
        2121
      ],
      "RANDOMNESS_ADDRESS": [
        2106
      ],
      "RANDOMNESS_CONTRACT": [
        2113
      ],
      "REQUEST_DEPOSIT_AMOUNT": [
        2129
      ],
      "Randomness": [
        2261
      ]
    },
    "nodeType": "SourceUnit",
    "src": "41:9261:7",
    "nodes": [
      {
        "id": 2102,
        "nodeType": "PragmaDirective",
        "src": "41:24:7",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".3"
        ]
      },
      {
        "id": 2106,
        "nodeType": "VariableDeclaration",
        "src": "111:80:7",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "RANDOMNESS_ADDRESS",
        "nameLocation": "128:18:7",
        "scope": 2262,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_address",
          "typeString": "address"
        },
        "typeName": {
          "id": 2104,
          "name": "address",
          "nodeType": "ElementaryTypeName",
          "src": "111:7:7",
          "stateMutability": "nonpayable",
          "typeDescriptions": {
            "typeIdentifier": "t_address",
            "typeString": "address"
          }
        },
        "value": {
          "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030383039",
          "id": 2105,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "149:42:7",
          "typeDescriptions": {
            "typeIdentifier": "t_address",
            "typeString": "address"
          },
          "value": "0x0000000000000000000000000000000000000809"
        },
        "visibility": "internal"
      },
      {
        "id": 2113,
        "nodeType": "VariableDeclaration",
        "src": "239:72:7",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "RANDOMNESS_CONTRACT",
        "nameLocation": "259:19:7",
        "scope": 2262,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_contract$_Randomness_$2261",
          "typeString": "contract Randomness"
        },
        "typeName": {
          "id": 2109,
          "nodeType": "UserDefinedTypeName",
          "pathNode": {
            "id": 2108,
            "name": "Randomness",
            "nameLocations": [
              "239:10:7"
            ],
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 2261,
            "src": "239:10:7"
          },
          "referencedDeclaration": 2261,
          "src": "239:10:7",
          "typeDescriptions": {
            "typeIdentifier": "t_contract$_Randomness_$2261",
            "typeString": "contract Randomness"
          }
        },
        "value": {
          "arguments": [
            {
              "id": 2111,
              "name": "RANDOMNESS_ADDRESS",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2106,
              "src": "292:18:7",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          ],
          "expression": {
            "argumentTypes": [
              {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            ],
            "id": 2110,
            "name": "Randomness",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 2261,
            "src": "281:10:7",
            "typeDescriptions": {
              "typeIdentifier": "t_type$_t_contract$_Randomness_$2261_$",
              "typeString": "type(contract Randomness)"
            }
          },
          "id": 2112,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "typeConversion",
          "lValueRequested": false,
          "nameLocations": [],
          "names": [],
          "nodeType": "FunctionCall",
          "src": "281:30:7",
          "tryCall": false,
          "typeDescriptions": {
            "typeIdentifier": "t_contract$_Randomness_$2261",
            "typeString": "contract Randomness"
          }
        },
        "visibility": "internal"
      },
      {
        "id": 2117,
        "nodeType": "VariableDeclaration",
        "src": "370:38:7",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "MAX_RANDOM_WORDS",
        "nameLocation": "386:16:7",
        "scope": 2262,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint32",
          "typeString": "uint32"
        },
        "typeName": {
          "id": 2115,
          "name": "uint32",
          "nodeType": "ElementaryTypeName",
          "src": "370:6:7",
          "typeDescriptions": {
            "typeIdentifier": "t_uint32",
            "typeString": "uint32"
          }
        },
        "value": {
          "hexValue": "313030",
          "id": 2116,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "405:3:7",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_100_by_1",
            "typeString": "int_const 100"
          },
          "value": "100"
        },
        "visibility": "internal"
      },
      {
        "id": 2121,
        "nodeType": "VariableDeclaration",
        "src": "500:40:7",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "MIN_VRF_BLOCKS_DELAY",
        "nameLocation": "516:20:7",
        "scope": 2262,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint32",
          "typeString": "uint32"
        },
        "typeName": {
          "id": 2119,
          "name": "uint32",
          "nodeType": "ElementaryTypeName",
          "src": "500:6:7",
          "typeDescriptions": {
            "typeIdentifier": "t_uint32",
            "typeString": "uint32"
          }
        },
        "value": {
          "hexValue": "32",
          "id": 2120,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "539:1:7",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_2_by_1",
            "typeString": "int_const 2"
          },
          "value": "2"
        },
        "visibility": "internal"
      },
      {
        "id": 2125,
        "nodeType": "VariableDeclaration",
        "src": "632:43:7",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "MAX_VRF_BLOCKS_DELAY",
        "nameLocation": "648:20:7",
        "scope": 2262,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint32",
          "typeString": "uint32"
        },
        "typeName": {
          "id": 2123,
          "name": "uint32",
          "nodeType": "ElementaryTypeName",
          "src": "632:6:7",
          "typeDescriptions": {
            "typeIdentifier": "t_uint32",
            "typeString": "uint32"
          }
        },
        "value": {
          "hexValue": "32303030",
          "id": 2124,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "671:4:7",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_2000_by_1",
            "typeString": "int_const 2000"
          },
          "value": "2000"
        },
        "visibility": "internal"
      },
      {
        "id": 2129,
        "nodeType": "VariableDeclaration",
        "src": "768:61:7",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "REQUEST_DEPOSIT_AMOUNT",
        "nameLocation": "785:22:7",
        "scope": 2262,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint256",
          "typeString": "uint256"
        },
        "typeName": {
          "id": 2127,
          "name": "uint256",
          "nodeType": "ElementaryTypeName",
          "src": "768:7:7",
          "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
          }
        },
        "value": {
          "hexValue": "31303030303030303030303030303030303030",
          "id": 2128,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "810:19:7",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_1000000000000000000_by_1",
            "typeString": "int_const 1000000000000000000"
          },
          "value": "1000000000000000000"
        },
        "visibility": "internal"
      },
      {
        "id": 2261,
        "nodeType": "ContractDefinition",
        "src": "1050:8251:7",
        "nodes": [
          {
            "id": 2133,
            "nodeType": "EventDefinition",
            "src": "1155:29:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 2131,
              "nodeType": "StructuredDocumentation",
              "src": "1077:73:7",
              "text": "@notice Event emitted when the request has been successfully executed"
            },
            "eventSelector": "f36cbf89dc2c3c5012cc948a9dfeb18671dc41e53febe215cfabc99113e755ed",
            "name": "FulFillmentSucceeded",
            "nameLocation": "1161:20:7",
            "parameters": {
              "id": 2132,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1181:2:7"
            }
          },
          {
            "id": 2136,
            "nodeType": "EventDefinition",
            "src": "1270:26:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 2134,
              "nodeType": "StructuredDocumentation",
              "src": "1189:76:7",
              "text": "@notice Event emitted when the request has failed to execute fulfillment"
            },
            "eventSelector": "dc0e0f314a3649fb3268c991fab573ae63e73e206a2311b2525af69ee504f072",
            "name": "FulFillmentFailed",
            "nameLocation": "1276:17:7",
            "parameters": {
              "id": 2135,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1293:2:7"
            }
          },
          {
            "id": 2142,
            "nodeType": "EnumDefinition",
            "src": "1562:96:7",
            "nodes": [],
            "canonicalName": "Randomness.RequestStatus",
            "documentation": {
              "id": 2137,
              "nodeType": "StructuredDocumentation",
              "src": "1302:255:7",
              "text": "@notice The status of the request\n @param DoesNotExist The request doesn't exist\n @param Pending The request cannot be fulfilled yet\n @param Ready The request is ready to be fulfilled\n @param Expired The request has expired"
            },
            "members": [
              {
                "id": 2138,
                "name": "DoesNotExist",
                "nameLocation": "1591:12:7",
                "nodeType": "EnumValue",
                "src": "1591:12:7"
              },
              {
                "id": 2139,
                "name": "Pending",
                "nameLocation": "1613:7:7",
                "nodeType": "EnumValue",
                "src": "1613:7:7"
              },
              {
                "id": 2140,
                "name": "Ready",
                "nameLocation": "1630:5:7",
                "nodeType": "EnumValue",
                "src": "1630:5:7"
              },
              {
                "id": 2141,
                "name": "Expired",
                "nameLocation": "1645:7:7",
                "nodeType": "EnumValue",
                "src": "1645:7:7"
              }
            ],
            "name": "RequestStatus",
            "nameLocation": "1567:13:7"
          },
          {
            "id": 2146,
            "nodeType": "EnumDefinition",
            "src": "1872:70:7",
            "nodes": [],
            "canonicalName": "Randomness.RandomnessSource",
            "documentation": {
              "id": 2143,
              "nodeType": "StructuredDocumentation",
              "src": "1664:203:7",
              "text": "@notice The type of randomness source\n @param LocalVRF Randomness VRF using the parachain material as seed\n @param RelayBabeEpoch Randomness VRF using relay material from previous epoch"
            },
            "members": [
              {
                "id": 2144,
                "name": "LocalVRF",
                "nameLocation": "1904:8:7",
                "nodeType": "EnumValue",
                "src": "1904:8:7"
              },
              {
                "id": 2145,
                "name": "RelayBabeEpoch",
                "nameLocation": "1922:14:7",
                "nodeType": "EnumValue",
                "src": "1922:14:7"
              }
            ],
            "name": "RandomnessSource",
            "nameLocation": "1877:16:7"
          },
          {
            "id": 2176,
            "nodeType": "StructDefinition",
            "src": "3254:413:7",
            "nodes": [],
            "canonicalName": "Randomness.Request",
            "documentation": {
              "id": 2147,
              "nodeType": "StructuredDocumentation",
              "src": "1948:1301:7",
              "text": "@notice The request details\n @param id The id of the request (is always < 2**64)\n @param refundAddress The address receiving the left-over fees after the fulfillment\n @param contractAddress The address of the contract being called back during fulfillment\n @param fee The amount to set aside to pay for the fulfillment\n @param gasLimit The gas limit to use for the fulfillment\n @param salt A string being mixed with the randomness seed to obtain different random words. This should be as unique as possible; using the same salt will lead to same randomness result.\n @param numWords The number of random words requested (from 1 to MAX_RANDOM_WORDS)\n @param randomnessSource The type of randomness source used to generate the random words\n @param fulfillmentBlock The parachain block number at which the request can be fulfilled (for LocalVRF only)\n @param fulfillmentEpochIndex The relay epoch index at which the request can be fulfilled (for RelayBabeEpoch)\n @param expirationBlock The parachain block number at which the request expires (for LocalVRF only)\n @param expirationEpochIndex The relay epoch index at which the request expires (for RelayBabeEpoch)\n @param status The current status of the request"
            },
            "members": [
              {
                "constant": false,
                "id": 2149,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "3287:2:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3279:10:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2148,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3279:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2151,
                "mutability": "mutable",
                "name": "refundAddress",
                "nameLocation": "3307:13:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3299:21:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 2150,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "3299:7:7",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2153,
                "mutability": "mutable",
                "name": "contractAddress",
                "nameLocation": "3338:15:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3330:23:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 2152,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "3330:7:7",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2155,
                "mutability": "mutable",
                "name": "fee",
                "nameLocation": "3371:3:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3363:11:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2154,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3363:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2157,
                "mutability": "mutable",
                "name": "gasLimit",
                "nameLocation": "3392:8:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3384:16:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2156,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3384:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2159,
                "mutability": "mutable",
                "name": "salt",
                "nameLocation": "3418:4:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3410:12:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 2158,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "3410:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2161,
                "mutability": "mutable",
                "name": "numWords",
                "nameLocation": "3439:8:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3432:15:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 2160,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "3432:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2164,
                "mutability": "mutable",
                "name": "randomnessSource",
                "nameLocation": "3474:16:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3457:33:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_RandomnessSource_$2146",
                  "typeString": "enum Randomness.RandomnessSource"
                },
                "typeName": {
                  "id": 2163,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 2162,
                    "name": "RandomnessSource",
                    "nameLocations": [
                      "3457:16:7"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2146,
                    "src": "3457:16:7"
                  },
                  "referencedDeclaration": 2146,
                  "src": "3457:16:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RandomnessSource_$2146",
                    "typeString": "enum Randomness.RandomnessSource"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2166,
                "mutability": "mutable",
                "name": "fulfillmentBlock",
                "nameLocation": "3507:16:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3500:23:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 2165,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "3500:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2168,
                "mutability": "mutable",
                "name": "fulfillmentEpochIndex",
                "nameLocation": "3540:21:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3533:28:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 2167,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "3533:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2170,
                "mutability": "mutable",
                "name": "expirationBlock",
                "nameLocation": "3578:15:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3571:22:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 2169,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "3571:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2172,
                "mutability": "mutable",
                "name": "expirationEpochIndex",
                "nameLocation": "3610:20:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3603:27:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 2171,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "3603:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2175,
                "mutability": "mutable",
                "name": "status",
                "nameLocation": "3654:6:7",
                "nodeType": "VariableDeclaration",
                "scope": 2176,
                "src": "3640:20:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_RequestStatus_$2142",
                  "typeString": "enum Randomness.RequestStatus"
                },
                "typeName": {
                  "id": 2174,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 2173,
                    "name": "RequestStatus",
                    "nameLocations": [
                      "3640:13:7"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2142,
                    "src": "3640:13:7"
                  },
                  "referencedDeclaration": 2142,
                  "src": "3640:13:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RequestStatus_$2142",
                    "typeString": "enum Randomness.RequestStatus"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Request",
            "nameLocation": "3261:7:7",
            "scope": 2261,
            "visibility": "public"
          },
          {
            "id": 2182,
            "nodeType": "FunctionDefinition",
            "src": "4011:58:7",
            "nodes": [],
            "documentation": {
              "id": 2177,
              "nodeType": "StructuredDocumentation",
              "src": "3673:333:7",
              "text": "Return the current relay epoch index\n @dev An epoch represents real time and not a block number\n @dev Currently, time between epoch changes cannot be longer than:\n @dev  - Kusama/Westend/Rococo: 600 relay blocks (1 hour)\n @dev  - Polkadot: 2400 relay blocks (4 hours)\n @custom:selector 81797566"
            },
            "functionSelector": "81797566",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "relayEpochIndex",
            "nameLocation": "4020:15:7",
            "parameters": {
              "id": 2178,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4035:2:7"
            },
            "returnParameters": {
              "id": 2181,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2180,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2182,
                  "src": "4061:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 2179,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "4061:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4060:8:7"
            },
            "scope": 2261,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2188,
            "nodeType": "FunctionDefinition",
            "src": "4213:59:7",
            "nodes": [],
            "documentation": {
              "id": 2183,
              "nodeType": "StructuredDocumentation",
              "src": "4075:133:7",
              "text": "Return the deposit required to perform a request\n @dev Each request will need a deposit.\n @custom:selector fb7cfdd7"
            },
            "functionSelector": "fb7cfdd7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requiredDeposit",
            "nameLocation": "4222:15:7",
            "parameters": {
              "id": 2184,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4237:2:7"
            },
            "returnParameters": {
              "id": 2187,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2186,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2188,
                  "src": "4263:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2185,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4263:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4262:9:7"
            },
            "scope": 2261,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2197,
            "nodeType": "FunctionDefinition",
            "src": "4474:104:7",
            "nodes": [],
            "documentation": {
              "id": 2189,
              "nodeType": "StructuredDocumentation",
              "src": "4278:191:7",
              "text": "@notice Returns the request status\n @param requestId The id of the request to check (must be < 2**64)\n @return status Status of the request\n @custom:selector d8a4676f"
            },
            "functionSelector": "d8a4676f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRequestStatus",
            "nameLocation": "4483:16:7",
            "parameters": {
              "id": 2192,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2191,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "4517:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2197,
                  "src": "4509:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2190,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4509:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4499:33:7"
            },
            "returnParameters": {
              "id": 2196,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2195,
                  "mutability": "mutable",
                  "name": "status",
                  "nameLocation": "4570:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2197,
                  "src": "4556:20:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RequestStatus_$2142",
                    "typeString": "enum Randomness.RequestStatus"
                  },
                  "typeName": {
                    "id": 2194,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2193,
                      "name": "RequestStatus",
                      "nameLocations": [
                        "4556:13:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2142,
                      "src": "4556:13:7"
                    },
                    "referencedDeclaration": 2142,
                    "src": "4556:13:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_RequestStatus_$2142",
                      "typeString": "enum Randomness.RequestStatus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4555:22:7"
            },
            "scope": 2261,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2206,
            "nodeType": "FunctionDefinition",
            "src": "4774:100:7",
            "nodes": [],
            "documentation": {
              "id": 2198,
              "nodeType": "StructuredDocumentation",
              "src": "4584:185:7",
              "text": "@notice Returns the request or revert\n @param requestId The id of the request to check (must be < 2**64)\n @return request The request\n @custom:selector c58343ef"
            },
            "functionSelector": "c58343ef",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRequest",
            "nameLocation": "4783:10:7",
            "parameters": {
              "id": 2201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2200,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "4811:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2206,
                  "src": "4803:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2199,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4803:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4793:33:7"
            },
            "returnParameters": {
              "id": 2205,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2204,
                  "mutability": "mutable",
                  "name": "request",
                  "nameLocation": "4865:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2206,
                  "src": "4850:22:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Request_$2176_memory_ptr",
                    "typeString": "struct Randomness.Request"
                  },
                  "typeName": {
                    "id": 2203,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2202,
                      "name": "Request",
                      "nameLocations": [
                        "4850:7:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2176,
                      "src": "4850:7:7"
                    },
                    "referencedDeclaration": 2176,
                    "src": "4850:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Request_$2176_storage_ptr",
                      "typeString": "struct Randomness.Request"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4849:24:7"
            },
            "scope": 2261,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2224,
            "nodeType": "FunctionDefinition",
            "src": "6569:214:7",
            "nodes": [],
            "documentation": {
              "id": 2207,
              "nodeType": "StructuredDocumentation",
              "src": "4880:1684:7",
              "text": "@notice Request random words generated from the parachain VRF\n @dev This is using pseudo-random VRF executed by the collator at the fulfillment\n @dev Warning:\n @dev The collator in charge of producing the block at fulfillment can decide to skip\n @dev producing the block in order to have a different random word generated by the next\n @dev collator, at the cost of a block reward. It is therefore economically viable to use\n @dev this randomness source only if the financial reward at stake is lower than the block\n @dev reward.\n @dev In order to reduce the risk of a collator being able to predict the random words\n @dev when the request is performed, it is possible to increase the delay to multiple blocks\n @dev The higher the delay is, the less likely the collator will be able to know which\n @dev collator will be in charge of fulfilling the request.\n @dev Fulfillment is manual and can be executed by anyone (for free) after the given delay\n @param refundAddress The address receiving the left-over fees after the fulfillment\n @param fee The amount to set aside to pay for the fulfillment\n @param gasLimit The gas limit to use for the fulfillment\n @param salt A string being mixed with the randomness seed to obtain different random words\n @param numWords The number of random words requested (from 1 to MAX_RANDOM_WORDS)\n @param delay The number of blocks until the request can be fulfilled (between MIN_DELAY_BLOCKS and MAX_DELAY_BLOCKS)\n @return requestId The id of the request requestLocalVRFRandomWords\n @custom:selector 9478430c"
            },
            "functionSelector": "9478430c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requestLocalVRFRandomWords",
            "nameLocation": "6578:26:7",
            "parameters": {
              "id": 2220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2209,
                  "mutability": "mutable",
                  "name": "refundAddress",
                  "nameLocation": "6622:13:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2224,
                  "src": "6614:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2208,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6614:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2211,
                  "mutability": "mutable",
                  "name": "fee",
                  "nameLocation": "6653:3:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2224,
                  "src": "6645:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2210,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6645:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2213,
                  "mutability": "mutable",
                  "name": "gasLimit",
                  "nameLocation": "6673:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2224,
                  "src": "6666:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 2212,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "6666:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2215,
                  "mutability": "mutable",
                  "name": "salt",
                  "nameLocation": "6699:4:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2224,
                  "src": "6691:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2214,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6691:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2217,
                  "mutability": "mutable",
                  "name": "numWords",
                  "nameLocation": "6719:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2224,
                  "src": "6713:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 2216,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "6713:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2219,
                  "mutability": "mutable",
                  "name": "delay",
                  "nameLocation": "6744:5:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2224,
                  "src": "6737:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 2218,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "6737:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6604:151:7"
            },
            "returnParameters": {
              "id": 2223,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2222,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2224,
                  "src": "6774:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2221,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6774:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6773:9:7"
            },
            "scope": 2261,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2240,
            "nodeType": "FunctionDefinition",
            "src": "8350:198:7",
            "nodes": [],
            "documentation": {
              "id": 2225,
              "nodeType": "StructuredDocumentation",
              "src": "6789:1556:7",
              "text": "@notice Request random words generated from the relaychain Babe consensus\n @dev The random words are generated from the hash of the all the VRF provided by the\n @dev relaychain validator during 1 epoch.\n @dev It requires a delay of at least 1 epoch after the current epoch to be unpredictable\n @dev at the time the request is performed.\n @dev Warning:\n @dev The validator (on the relaychain) of the last block of an epoch can decide to skip\n @dev producing the block in order to choose the previous generated epoch random number\n @dev at the cost of a relaychain block rewards. It is therefore economically viable to use\n @dev this randomness source only if the financial reward at stake is lower than the relaychain\n @dev block reward.\n @dev (see https://crates.parity.io/pallet_babe/struct.RandomnessFromOneEpochAgo.html)\n @dev Fulfillment is manual and can be executed by anyone (for free) at\n @dev the beginning of the 2nd relay epoch following the current one\n @param refundAddress The address receiving the left-over fees after the fulfillment\n @param fee Amount to set aside to pay for the fulfillment. Those fees are taken from the contract\n @param gasLimit Gas limit for the fulfillment\n @param salt Salt to be mixed with raw randomness to get output\n @param numWords Number of random words to be returned (limited to MAX_RANDOM_WORDS)\n @return requestId The id of the request\n @custom:selector 33c14a63"
            },
            "functionSelector": "33c14a63",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requestRelayBabeEpochRandomWords",
            "nameLocation": "8359:32:7",
            "parameters": {
              "id": 2236,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2227,
                  "mutability": "mutable",
                  "name": "refundAddress",
                  "nameLocation": "8409:13:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2240,
                  "src": "8401:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2226,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8401:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2229,
                  "mutability": "mutable",
                  "name": "fee",
                  "nameLocation": "8440:3:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2240,
                  "src": "8432:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2228,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8432:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2231,
                  "mutability": "mutable",
                  "name": "gasLimit",
                  "nameLocation": "8460:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2240,
                  "src": "8453:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 2230,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "8453:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2233,
                  "mutability": "mutable",
                  "name": "salt",
                  "nameLocation": "8486:4:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2240,
                  "src": "8478:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2232,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8478:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2235,
                  "mutability": "mutable",
                  "name": "numWords",
                  "nameLocation": "8506:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2240,
                  "src": "8500:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 2234,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "8500:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8391:129:7"
            },
            "returnParameters": {
              "id": 2239,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2238,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2240,
                  "src": "8539:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2237,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8539:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8538:9:7"
            },
            "scope": 2261,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2246,
            "nodeType": "FunctionDefinition",
            "src": "8820:52:7",
            "nodes": [],
            "documentation": {
              "id": 2241,
              "nodeType": "StructuredDocumentation",
              "src": "8554:261:7",
              "text": "@dev fulFill the request which will call the contract method \"fulfillRandomWords\"\n @dev Fees of the caller are refunded if the request is fulfillable\n @param requestId Request to be fulfilled (must be < 2**64)\n @custom:selector 9a91eb0d"
            },
            "functionSelector": "9a91eb0d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillRequest",
            "nameLocation": "8829:14:7",
            "parameters": {
              "id": 2244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2243,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "8852:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2246,
                  "src": "8844:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2242,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8844:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8843:19:7"
            },
            "returnParameters": {
              "id": 2245,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8871:0:7"
            },
            "scope": 2261,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2254,
            "nodeType": "FunctionDefinition",
            "src": "9039:99:7",
            "nodes": [],
            "documentation": {
              "id": 2247,
              "nodeType": "StructuredDocumentation",
              "src": "8878:156:7",
              "text": "@param requestId Request receiving the additional fees (must be < 2**64)\n @param feeIncrease Amount to increase\n @custom:selector d0408a7f"
            },
            "functionSelector": "d0408a7f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "increaseRequestFee",
            "nameLocation": "9048:18:7",
            "parameters": {
              "id": 2252,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2249,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "9084:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2254,
                  "src": "9076:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2248,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9076:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2251,
                  "mutability": "mutable",
                  "name": "feeIncrease",
                  "nameLocation": "9111:11:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2254,
                  "src": "9103:19:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2250,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9103:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9066:62:7"
            },
            "returnParameters": {
              "id": 2253,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9137:0:7"
            },
            "scope": 2261,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 2260,
            "nodeType": "FunctionDefinition",
            "src": "9242:57:7",
            "nodes": [],
            "documentation": {
              "id": 2255,
              "nodeType": "StructuredDocumentation",
              "src": "9144:93:7",
              "text": "@param requestId Request to be purged (must be < 2**64)\n @custom:selector 1d26cbab"
            },
            "functionSelector": "1d26cbab",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "purgeExpiredRequest",
            "nameLocation": "9251:19:7",
            "parameters": {
              "id": 2258,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2257,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "9279:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2260,
                  "src": "9271:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2256,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9271:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9270:19:7"
            },
            "returnParameters": {
              "id": 2259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9298:0:7"
            },
            "scope": 2261,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Randomness",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 2130,
          "nodeType": "StructuredDocumentation",
          "src": "832:218:7",
          "text": "@author The Moonbeam Team\n @title Pallet Randomness Interface\n @dev The interface through which solidity contracts will interact with Randomness\n @custom:address 0x0000000000000000000000000000000000000809"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          2261
        ],
        "name": "Randomness",
        "nameLocation": "1060:10:7",
        "scope": 2262,
        "usedErrors": [],
        "usedEvents": [
          2133,
          2136
        ]
      }
    ],
    "license": "GPL-3.0-only"
  },
  "id": 7
}